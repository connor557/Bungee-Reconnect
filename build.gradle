plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id 'maven-publish'
}

defaultTasks 'build'

repositories {
    mavenLocal()
    maven { url 'https://jitpack.io' }
    maven { url = uri('http://repo.maven.apache.org/maven2' )
    }
}

dependencies {
    implementation 'com.github.HexagonMC.BungeeCord:bungeecord-api:262'
}

group = 'net.ddns.minecraftbukkit'
version = '1.4.2-FINAL'
description = 'BMGR-Core'
sourceCompatibility = JavaVersion.VERSION_1_8

File librariesRuntimeDirectory = new File("libraries_runtime")
File librariesShadeDirectory = new File("libraries_shade")
File targetJarDirectory = new File("target")
String resourcesDirectoryName = "resources";

task setupFolders(type: DefaultTask) {doLast{
	librariesRuntimeDirectory.mkdirs()
	librariesShadeDirectory.mkdirs()
	targetJarDirectory.mkdirs()
}}

task updateShadeLibraries(type: UpdateLibrariesTask) {
	directory = librariesShadeDirectory
	libraries = []
}

sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
		resources {
			srcDirs = ['resources']
		}
	}
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url = uri('http://repo.maven.apache.org/maven2' )
    }
}

dependencies {
    shadow fileTree(dir: librariesRuntimeDirectory, include: '*.jar')
	compile fileTree(dir: librariesShadeDirectory, include: '*.jar')
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
	compile group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.2'
    implementation 'com.github.HexagonMC.BungeeCord:bungeecord-api:262'
}

compileJava {
	doFirst {
	    classpath -= configurations.shadow
	    classpath += configurations.shadow
	}

	options.encoding = 'UTF-8'
	options.incremental = false
}

shadowJar {
	doFirst {
		new File(destinationDir, archiveName).delete()
	}

	from sourceSets.main.java.srcDirs
	from 'LICENSE'

	archiveName = jar.archiveName

	exclude 'META-INF/**'

	minimize()
}

task postprocessFatJar(type: Zip) {
	File originalJar = new File(shadowJar.destinationDir, shadowJar.archiveName)

	archiveName = shadowJar.archiveName

	from(zipTree(originalJar)) {
        exclude 'META-INF/**'
	}
}

task copyFinalJarToTarget(type: DefaultTask) {doLast{
	java.nio.file.Files.copy(
		postprocessFatJar.archivePath.getAbsoluteFile().toPath(),
		new File(targetJarDirectory, jar.baseName + '.jar').getAbsoluteFile().toPath(),
		java.nio.file.StandardCopyOption.REPLACE_EXISTING
	)
}}



publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

compileJava.dependsOn(clean)
compileJava.dependsOn(setupFolders)
jar.enabled = false
jar.finalizedBy(shadowJar)
shadowJar.finalizedBy(postprocessFatJar)
postprocessFatJar.finalizedBy(copyFinalJarToTarget)
